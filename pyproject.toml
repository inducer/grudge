[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "grudge"
version = "2024.0"
description = "Discretize discontinuous Galerkin operators quickly on heterogeneous hardware"
readme = "README.rst"
license = "MIT"
authors = [
    { name = "Andreas Kloeckner", email = "inform@tiker.net" },
]
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Other Audience",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Software Development :: Libraries",
    "Topic :: Utilities",
]
dependencies = [
    "arraycontext>=2021.1",
    "constantdict",
    "loopy>=2024.1",
    "meshmode>=2021.2",
    "modepy>=2021.1",
    "pymbolic>=2022.2",
    "pyopencl>=2022.1",
    "pytools>=2024.1.18",
]

[project.optional-dependencies]
all = [
    "meshpy>=2022.1",
    "mpi4py",
    "pymetis>=2023.1",
    "pytato>=2021.1",
    "pyvisfile>=2022.1",
]
doc = [
    "furo",
    "sphinx-copybutton",
    "sphinx>=4",
]
test = [
    "mypy",
    "pytest",
    "ruff"
]

[project.urls]
Documentation = "https://documen.tician.de/grudge"
Homepage = "https://github.com/inducer/grudge"

[tool.pytest.ini_options]
markers = [
    "mpi: mark a test using MPI",
]

[tool.ruff]
preview = true

[tool.ruff.lint]
extend-select = [
    "B",   # flake8-bugbear
    "C",   # flake8-comprehensions
    "E",   # pycodestyle
    "F",   # pyflakes
    "G",   # flake8-logging-format
    "I",   # flake8-isort
    "N",   # pep8-naming
    "NPY", # numpy
    "Q",   # flake8-quotes
    "RUF", # ruff
    "UP",  # pyupgrade
    "W",   # pycodestyle
    "TC",
]
extend-ignore = [
    "C90",  # McCabe complexity
    "E221", # multiple spaces before operator
    "E226", # missing whitespace around arithmetic operator
    "E241", # multiple spaces after comma
    "E242", # tab after comma
    "E402", # module level import not at the top of file
]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = [
    "pytools",
    "pymbolic",
    "meshmode",
    "modepy",
    "pyopencl",
    "loopy",
    "arraycontext",
]
known-local-folder = [
    "grudge",
]
lines-after-imports = 2
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"examples/*.py" = ["I002"]
"doc/conf.py" = ["I002"]

[tool.typos.default]
extend-ignore-re = [
  "(?Rm)^.*(#|//)\\s*spellchecker:\\s*disable-line$"
]

[tool.typos.default.extend-words]
# like n-dimensional
nd = "nd"

# like 'theorem'
thm = "thm"

[tool.typos.files]
extend-exclude = [
]

[tool.basedpyright]
reportImplicitStringConcatenation = "none"
reportUnnecessaryIsInstance = "none"
reportUnusedCallResult = "none"
reportExplicitAny = "none"
reportUnusedParameter = "hint"

reportPrivateUsage = "none"
reportAny = "none"
reportUnreachable = "hint"

# This reports even cycles that are qualified by 'if TYPE_CHECKING'. Not what
# we care about at this moment.
# https://github.com/microsoft/pyright/issues/746
reportImportCycles = "none"

exclude = [
    "doc",
    ".conda-root",
]

pythonVersion = "3.10"
pythonPlatform = "All"


[[tool.basedpyright.executionEnvironments]]
root = "test"
reportArgumentType = "hint"
reportAttributeAccessIssue = "hint"
reportMissingImports = "none"
reportMissingParameterType = "none"
reportMissingTypeStubs = "none"
reportUnknownArgumentType = "none"
reportUnknownMemberType = "hint"
reportUnknownParameterType = "none"
reportUnknownVariableType = "none"
reportUnknownLambdaType = "hint"
reportOperatorIssue = "hint"
reportPossiblyUnboundVariable = "hint"
reportPrivateUsage = "none"
reportUnusedImport = "hint"
reportIndexIssue = "hint"
reportOptionalOperand = "hint"
reportUnusedVariable = "hint"
reportCallIssue = "hint"
reportPrivateLocalImportUsage = "none"
reportReturnType = "hint"

[[tool.basedpyright.executionEnvironments]]
root = "examples"
reportArgumentType = "hint"
reportAttributeAccessIssue = "hint"
reportMissingImports = "none"
reportMissingParameterType = "none"
reportMissingTypeStubs = "none"
reportUnknownArgumentType = "none"
reportUnknownMemberType = "hint"
reportUnknownParameterType = "none"
reportUnknownVariableType = "none"
reportUnknownLambdaType = "hint"
reportOperatorIssue = "hint"
reportPossiblyUnboundVariable = "hint"
reportPrivateUsage = "none"
reportUnusedImport = "hint"
reportIndexIssue = "hint"

