name: CI
on:
    push:
        branches:
        - main
    pull_request:
    schedule:
        - cron:  '17 3 * * 0'

jobs:
    flake8:
        name: Flake8
        runs-on: ubuntu-latest
        steps:
        -   uses: actions/checkout@v3
        -
            uses: actions/setup-python@v4
            with:
                # matches compat target in setup.py
                python-version: '3.8'
        -   name: "Main Script"
            run: |
                curl -L -O https://gitlab.tiker.net/inducer/ci-support/raw/main/prepare-and-run-flake8.sh
                . ./prepare-and-run-flake8.sh "$(basename $GITHUB_REPOSITORY)" examples test

    pylint:
        name: Pylint
        runs-on: ubuntu-latest
        steps:
        -   uses: actions/checkout@v3
        -   name: "Main Script"
            run: |
                echo "- matplotlib" >> .test-conda-env-py3.yml
                echo "- scipy" >> .test-conda-env-py3.yml
                echo "-------------------------------------------"
                cat $CONDA_ENVIRONMENT
                echo "-------------------------------------------"
                USE_CONDA_BUILD=1

                curl -L -O https://gitlab.tiker.net/inducer/ci-support/raw/master/prepare-and-run-pylint.sh

                . ./prepare-and-run-pylint.sh "$(basename $GITHUB_REPOSITORY)" test/*.py \
                    $(find examples -name '*.py')

    pytest3:
        name: Pytest on Py3
        runs-on: ubuntu-latest
        steps:
        -   uses: actions/checkout@v3
        -   name: "Main Script"
            run: |
                curl -L -O https://gitlab.tiker.net/inducer/ci-support/raw/main/build-and-test-py-project-within-miniconda.sh
                . ./build-and-test-py-project-within-miniconda.sh

    pyexamples3:
        name: Examples on Py3
        runs-on: ubuntu-latest
        steps:
        -   uses: actions/checkout@v3
        -   name: "Main Script"
            run: |
                curl -L -O https://tiker.net/ci-support-v0
                . ci-support-v0
                build_py_project_in_conda_env
                run_examples

                python wave/wave-op-mpi.py --lazy
                python wave/wave-op-mpi.py --lazy --quad --nonaffine
                python euler/acoustic_pulse.py --lazy
                python euler/vortex.py --oi --lazy

                # --oversubscribe is an option for Open MPI (which is what the CI uses)
                # It allows the CI to succeed even if the CI runner does not
                # have a sufficient number of cores.
                mpiexec -np 2 --oversubscribe python wave/wave-op-mpi.py --lazy

    docs:
        name: Documentation
        runs-on: ubuntu-latest
        steps:
        -   uses: actions/checkout@v3
        -   name: "Main Script"
            run: |
                echo "- matplotlib" >> .test-conda-env-py3.yml
                curl -L -O https://gitlab.tiker.net/inducer/ci-support/raw/main/ci-support.sh

                # Work around regression introduced in
                # https://github.com/sphinx-doc/sphinx/pull/11645
                # see also https://github.com/sphinx-doc/sphinx/issues/11662
                export CI_SUPPORT_SPHINX_VERSION_SPECIFIER="<7.2.5"

                . ci-support.sh
                build_py_project_in_conda_env
                build_docs

    downstream_tests:
        strategy:
            matrix:
                downstream_project: [mirgecom]
        name: Tests for downstream project ${{ matrix.downstream_project }}
        runs-on: ubuntu-latest
        steps:
        -   uses: actions/checkout@v3
        -   name: "Main Script"
            env:
                DOWNSTREAM_PROJECT: ${{ matrix.downstream_project }}
            run: |
                curl -L -O -k https://tiker.net/ci-support-v0
                . ./ci-support-v0

                # https://github.com/inducer/grudge/issues/211
                export CISUPPORT_PARALLEL_PYTEST=no

                test_downstream "$DOWNSTREAM_PROJECT"


# vim: sw=4
